<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.xudasong.springcloud</groupId>
	<artifactId>spring-cloud-test</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-cloud-test</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<!-- postgreSQL -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>3.5.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator -->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
			<version>3.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.3</version>
		</dependency>
		<!-- Swagger 2相关依赖包 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>
		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>5.8.15</version>
		</dependency>


	</dependencies>


	<build>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>static/**</include>
					<include>**/*.yml</include>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
<!--				<version>1.2.1</version>-->
				<!--将插件绑定在某个phase执行-->
				<executions>
					<execution>
						<id>build-image</id>
						<!--将插件绑定在package这个phase上，也就是说，用户只需要执行mvn package,就会自动执行mvn docker:build-->
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
<!--				<configuration>-->
<!--					&lt;!&ndash; 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 &ndash;&gt;-->
<!--					&lt;!&ndash; 详见：https://github.com/spotify/docker-maven-plugin    Invalid repository name ... only [a-z0-9-_.] are allowed&ndash;&gt;-->
<!--					&lt;!&ndash; 第一种打镜像方式 &ndash;&gt;-->
<!--					<imageName>spring-cloud-test</imageName>-->
<!--					<baseImage>openjdk:8u201-jdk-alpine3.9</baseImage>-->
<!--					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
<!--					<resources>-->
<!--						<resource>-->
<!--							<targetPath>/</targetPath>-->
<!--							<directory>${project.build.directory}</directory>-->
<!--							<include>${project.build.finalName}.jar</include>-->
<!--						</resource>-->
<!--					</resources>-->
<!--				</configuration>-->
				<!-- 第二种打镜像方式（通过DockerFile） -->
				<configuration>
					<!--指定生成的镜像名-->
					<imageName>clover/${project.artifactId}</imageName>
					<!--指定标签-->
					<imageTags>
						<imageTag>latest</imageTag>
					</imageTags>
					<!--指定Dockerfile 的位置,${project.basedir}:项目的根路径下-->
					<dockerDirectory>${project.basedir}</dockerDirectory>
					<!--指定远程docker api地址-->
					<dockerHost>http://localhost:2375</dockerHost>
					<resources>
						<resource>
							<!--容器中自定义jar包存放的位置，及对应的target目录-->
							<targetPath>/</targetPath>
							<!--本地jar包所在路径-->
							<directory>${project.build.directory}</directory>
							<!--需要包含本地jar包名称，对应的是Dockerfile中添加的文件名-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!--以下两行是为了docker push到DockerHub使用的-->
					<!--<serverId>docker-hub</serverId>
    <registryUrl>https://index.docker.io/v1</registryUrl>-->
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
